import { Component, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { RoomDetails, RoomImage } from '../../interfaces/rooms-interface';
import { ActivatedRoute } from '@angular/router';
import { ApiService } from '../../services/api.service';
import { CurrencyPipe, NgFor, NgIf } from '@angular/common';
import { BookingResponse } from '../../interfaces/booking-interface';
import { FormsModule } from '@angular/forms';
import { SliderComponent } from '../../components/slider/slider.component';

@Component({
  selector: 'app-room-details',
  standalone: true,
  imports: [NgFor, CurrencyPipe, NgIf, FormsModule, SliderComponent],
  templateUrl: './room-details.component.html',
  styleUrls: ['./room-details.component.scss'],
})
export class RoomDetailsComponent implements OnInit, OnDestroy {
  // Define room features with icons and descriptions
  roomFeatures: { icon: string; description: string }[] = [
    { icon: 'fa-solid fa-bed', description: 'Double Bed' },
    { icon: 'fa-solid fa-wifi', description: 'Free Wi-Fi' },
    { icon: 'fa-regular fa-newspaper', description: 'Free Newspaper' },
    { icon: 'fa-solid fa-sun', description: 'Beach View' },
    { icon: 'fa-solid fa-users', description: '2 Guests ' },
    { icon: 'fa-solid fa-bacon', description: 'Breakfast Included' },
    { icon: 'fa-solid fa-window-maximize', description: 'Private Balcony' },
    { icon: 'fa-solid fa-tv', description: 'Flat-Screen TV' },
    { icon: 'fa-solid fa-hot-tub', description: 'Jacuzzi' },
    { icon: 'fa-solid fa-fan', description: 'Air Conditioning' },
    { icon: 'fa-solid fa-cocktail', description: 'Mini Bar' },
    { icon: 'fa-solid fa-concierge-bell', description: 'Room Service' },
  ];

  roomsDetails: RoomDetails | null = null; // Holds room details fetched from the API
  roomsImages: string[] = []; // Holds room images fetched from the API
  currentDate: string = new Date().toISOString().split('T')[0]; // Current date in YYYY-MM-DD format

  // Booking Form Variables
  checkInDate: string = '';
  checkOutDate: string = '';
  customerName: string = '';
  customerPhone: string = '';

  constructor(
    private activatedRoute: ActivatedRoute, // ActivatedRoute to get route parameters
    private apiService: ApiService, // ApiService for API requests
    private cdRef: ChangeDetectorRef // Inject ChangeDetectorRef
  ) {}

  ngOnInit(): void {
    const roomId = this.activatedRoute.snapshot.paramMap.get('id'); // Retrieve room ID from the URL
    if (roomId) {
      this.getRoomDetails(+roomId); // Fetch room details if ID is found
    }
  }

  ngOnDestroy(): void {
    // Clean up any resources if needed
  }

  // Fetch room details based on room ID
  getRoomDetails(roomId: number) {
    this.apiService.getRoomById(roomId).subscribe({
      next: (data) => {
        this.roomsDetails = data; // Set room details if request is successful
        this.roomsImages = data.images.map((image: RoomImage) => image.source); // Map RoomsImage[] to string[]
        console.log(this.roomsDetails); // Log room details for debugging
      },
      error: (error) => {
        console.error('Error fetching room details', error); // Log error if request fails
      },
    });
  }

  // Method to create a booking object and send it to the backend
  onSubmitBooking() {
    if (this.roomsDetails) {
      // Format check-in and check-out dates to "YYYY-MM-DD"
      const checkIn = new Date(this.checkInDate);
      const checkOut = new Date(this.checkOutDate);

      // Format the check-in and check-out dates to match backend format (YYYY-MM-DD)
      const formattedCheckInDate = checkIn.toISOString().split('T')[0];
      const formattedCheckOutDate = checkOut.toISOString().split('T')[0];

      // Ensure customerId is populated, for example, you can get it from the logged-in user
      const customerId = '1'; // You can replace this with the actual customer ID from your auth system

      // Prepare the booking data
      const booking: BookingResponse = {
        checkInDate: formattedCheckInDate,
        checkOutDate: formattedCheckOutDate,
        customerId: customerId, // Make sure this is a string and valid
        customerName: this.customerName,
        customerPhone: this.customerPhone,
        isConfirmed: true, // Assuming the booking is confirmed immediately
        roomID: this.roomsDetails.roomTypeId, // Correct field based on the backend
        id: 0, // This will be generated by the backend
        totalPrice: 0, // This will be calculated by the backend
      };

      // Make the booking API request
      this.apiService.bookingRoom(booking).subscribe({
        next: (response) => {
          console.log('Booking successful:', response);
          // Handle successful booking (e.g., show success message, navigate to confirmation page)
        },
        error: (error) => {
          console.error('Error booking room:', error);
          // Handle error (e.g., show error message to user)
        },
      });
    }
  }
}
